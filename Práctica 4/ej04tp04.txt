//Resolveré este ejercicio de dos maneras distintas, primero lo haré usando un proceso intermedio Oficina
// y luego lo haré prescindiendo de él.

a) Usando proceso Oficina:

chan dejarReclamo(Reclamo rec);
chan entregarReclamo(Reclamo rec);
chan buscarReclamo(int);

Process Portero[i = 1..3]{
  Reclamo rec;
  while (true){
    send buscarReclamo(i);
    receive entregarReclamo[i](rec);
    if rec != null
      atenderReclamo(rec);
    else
      "recorrer los pasillos";
      delay(10);
  }
}

Process Oficina{
  Reclamo rec;
  int idPortero;
  while true{
    //El portero avisa que tiene tiempo para atender un reclamo, si no hay, se irá a dar vueltas por ahí.
    receive buscarReclamo(idPortero);
    if (not empty(dejarReclamo))
      receive dejarReclamo(rec);
    else
      rec = null;                                       //Si no hay nada de reclamos, le mando alto null.
    send entregarReclamo[idPortero](rec);
  }
}

Process Persona[j = 1..P]{
  Reclamo rec;
  //Crea reclamos infinitamente (porque eso es lo que mejor suele hacer las personas!)
  while true{
    rec = generarReclamo();
    send dejarReclamo(rec);
  }
}


--------------------------------------------------------------------------------

b) Pensemos ahora en hacerlo sin la Oficina:
//Bueno, como se menciona en los comentarios, no me sirve esta solución debido a la naturaleza del enunciado (si el portero solo tuviera que atender pedidos, serviría, siempre que saque el if para que no haya busy waiting).

chan dejarReclamo;

Process Persona[i = 1..P]{
  Reclamo rec;
  while true{
    rec = generarReclamo();
    send dejarReclamo(rec);
    delay(random());        //Tiempo en el que no jode a nadie.
  }
}

Process Portero[j=1..3]{
  Reclamo rec;
  //Acá se está generando un busy waiting.
  //Acá existe un problema algo grave que iría en contra de lo que dice el enunciado (ningún portero debe permanecer ocioso).
  //Si dos procesos preguntan si dejarReclamo está vacío a la vez, ambos pasarán el if, pero solo uno tomará el mensaje 
  //mientras el otro tiene que esperar en el receive. (consultarlo.) Esto está salvado en la solución anterior.
  while true{
    if not empty(dejarReclamo)
      receive dejarReclamo(rec);
      atenderReclamo(rec);
    else
      delay(10);
  }
}

NOTA: pensar en resolver el problema con guardas, pero este caso funciona igual sin necesidad de nada extra.
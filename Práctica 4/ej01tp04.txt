-----------------------------------------------------------------------------------------
a) Usaremos PASAJE DE MENSAJES ASINCRÓNICOS (y seguramente una gran cantidad de canales):
-----------------------------------------------------------------------------------------

chan pedirLapizColor;
chan pedirLapizNegro;
chan pedirLapizCualquiera;

//Asumo que la cantidad de niños de cada tipo es la misma, caso contrario solo se necesita poner una variable para cada tipo.
chan enviarLapizColor[N](idLapiz);
chan enviarLapizNegro[N](idLapiz);
chan enviarLapizCualquiera[N](idLapiz, char tipoLapiz);

chan devolverLapizColor[cantColor];
chan devolverLapizNegro[cantNegro];

chan lapizColorLibre(int);
chan lapizNegroLibre(int)

Process Abuela{
  //Ella es la encargada de administrar el uso de los lápices.
  int idNiño;
  int idLapiz;
  char tipoLapiz;
  while true{
    if (not empty(pedirLapizColor) and not empty(lapizColorLibre)) ->
    {
      receive pedirLapizColor(idNiño);
      receive lapizColorLibre(idLapiz);
      send enviarLapizColor[idNiño](idLapiz);
    }
    [] not empty(pedirLapizNegro) and not_empty(lapizNegroLibre) ->
    {
      receive pedirLapizNegro(idNiño);
      receive lapizNegroLibre(idLapiz);
      send enviarLapizColor[idNiño](idLapiz);
    }
    [] not empty(pedirLapizCualquiera) ->
    {
      if not empty(lapizNegroLibre) then{
        receive pedirLapizCualquiera(idNiño);
        receive lapizNegroLibre(idLapiz);
        send enviarLapizCualquiera[idNiño](idLapiz, 'N');
      }else if not_empty(lapizColorLibre) then {
        receive pedirLapizCualquiera(idNiño);
        receive lapizColorLibre(idLapiz);
        send enviarLapizCualquiera[idNiño](idLapiz, 'C');
      }
    }
  }
}

Process NiñoTipoColor[id = 1..N]{
  int idLapiz;                                          //Necesito poder manipular esta variable internamente.
  while true{
    send pedirLapizColor(id);
    receive enviarLapizColor[id](idLapiz);
    delay(10);                                          //usa el lapiz antes de devolverlo.
    send devolverLapizColor[idLapiz]();
  }
}

Process NiñoTipoNegro [i = 1..N]{
  int idLapiz;
  while true{
    send pedirLapizNegro(id);
    receive enviarLapizColor[id](idLapiz);
    delay(10);
    send devolverLapizNegro[idLapiz]();
  }
}

Process NiñoTipoCualquiera [i = 1..N]{
  int idLapiz;
  char tipoLapiz;
  while true{
    send pedirLapizCualquiera(id);
    receive enviarLapizCualquiera[id](idLapiz, tipoLapiz);
    //Cuando quiera devolver el lapiz, me conviene saber en qué canal debo enviar el mensaje así se hace un poco más fácil.
    delay(10);
    if (tipoLapiz == 'N') then{
      send devolverLapizNegro[idLapiz]();
    }else{
      send devolverLapizColor[idLapiz]();
    }
  }
}

Process LapizNegro[i = 1..cantNegro]{
  while true{
    send lapizNegroLibre(i);
    receive devolverLapizNegro[i]();
  }
}

Process LapizColor[j = 1..cantColor]{
  while true{
    send lapizColorLibre(j);
    receive devolverLapizColor[j]();
  }
}


--------------------------------------------------------------------------------
b) Ahora usaremos PASAJE DE MENSAJES SINCRÓNICOS:
--------------------------------------------------------------------------------


Process Abuela{
  integer IdNiño, idLapiz;
  Cola lapicesColor;
  Cola lapicesNegro;
  string tipoLapiz;

  while true{
    if (LapizColor[*]libre(idLapiz)) ->
      lapicesColor.push (idLapiz);

    [] (LapizNegro[*]?libre(idLapiz)) ->
      lapicesNegro.push (idLapiz);

    [] ((not empty (lapicesColor)); NiñoTipoColor[*]?pedir(idNiño)) ->{
      idLapiz = lapicesColor.pop();
      NiñoTipoColor[idNiño]!dar(idLapiz);
    }
    [] ((not empty (lapicesNegro)); NiñoTipoNegro[*]?pedir(idNiño)) ->{
      idLapiz = lapicesNegro.pop();
      NiñoTipoNegro[idNiño]!dar(idLapiz);
    }
    [] ((not empty(lapicesNegro)); NiñoTipoCualquiera[*]?pedir(idNiño)) ->{
      idLapiz = lapicesNegro.pop();
      NiñoTipoCualquiera[idNiño]!dar(idLapiz, 'negro');
    }
    [] ((not empty(LapicesColor)); NiñoTipoCualquiera[*]?pedir(idNiño)) -> {
      idLapiz = lapicesColor.pop();
      NiñoTipoCualquiera[idNiño]!dar(idLapiz, 'color');
    }
  }
}


Process NiñoTipoColor[i=1..N]{
  integer idLapiz;
  while (true){
    Abuela!pedir(i);
    Abuela?dar(idLapiz);
    "Uso el lapiz";
    LapizColor[idLapiz]!liberar();
  }
}


Process NiñoTipoNegro[i=1..N]{
  integer idLapiz;
  while (true){
    Abuela!pedir(i);
    Abuela?dar(idLapiz);
    "Uso el lapiz";
    LapizNegro[idLapiz]!liberar();
  }
}


Process NiñoTipoCualquiera[i=1..N]{
  integer idLapiz;
  string tipoLapiz;
  while (true){
    Abuela!pedir(i);
    Abuela?dar(idLapiz, tipoLapiz);
    if (tipoLapiz == 'negro')
      LapizNegro[idLapiz]!liberar();
    else
      LapizColor[idLapiz]!liberar();
  }
  
}


Process LapizNegro[i = 1..cantNegro]{
  Abuela!libre(i);
  while true {
    if (NiñoTipoCualquiera[*]?liberar()) -> Abuela!libre(i);
    [] (NiñoTipoNegro[*]?liberar()) -> Abuela!libre(i);
  }
}


Process LapizColor[j = 1..cantColor]{
  Abuela!libre(i);
  while true {
    if (NiñoTipoCualquiera[*]?liberar()) -> Abuela!libre(j);
    [] (NiñoTipoColor[*]?liberar()) -> Abuela!libre(j);
  }
}


--------------------------------------------------------------------------------
c) Ahora debo seguir resolviendo con PMS, pero cambia enunciado.
Para este problema debo pensarlo al revéz de cómo lo hice en b).
En este caso lo que tendría que almacenar son los pedidos de lapices en colas
y consultar por ellas antes de ceder el lapiz a algún niño.
--------------------------------------------------------------------------------


Process Abuela{
  integer IdNiño, idLapiz;
  string tipoLapiz;
  Cola pedidosNiñosNegro;
  Cola pedidosNiñosColor;
  Cola pedidosNiñosCualquiera;

  while (true){
    if (NiñoTipoColor[*]?pedir(idNiño)) ->
      pedidosNiñosColor.push(idNiño);

    [] (NiñoTipoNegro[*]?pedir(idNiño)) ->
      pedidosNiñosNegro.push(idNiño);

    [] (NiñoTipoCualquiera[*]?pedir(idNiño)) ->
      pedidosNiñosCualquiera.push(idNiño);

    [] ((not empty (pedidosNiñosColor)); LapizColor[*]?libre(idLapiz)) ->{
      idNiño = pedidosNiñosColor.pop();
      NiñoColor[idNiño]!dar(idLapiz);
    }
    [] ((not empty(pedidosNiñosNegro)); LapizNegro[*]?libre(idLapiz)) ->{
      idNiño = pedidosNiñosNegro.pop();
      NiñoNegro[idNiño]!dar(idLapiz);
    }
    [] ((not empty(pedidosNiñosCualquiera) and (empty(pedidosNiñosColor))); LapizColor[*]?libre(idLapiz)) ->
      idNiño = pedidosNiñosCualquiera.pop();
      NiñoCualquiera[idNiño]!dar(idLapiz, 'color');
    }
    [] ((not empty(pedidosNiñosCualquiera) and (empty(pedidosNiñosNegro))); LapizNegro[*]?libre(idLapiz)) ->
      idNiño = pedidosNiñosCualquiera.pop();
      NiñoCualquiera[idNiño]!dar(idLapiz, 'negro');
  }
}

//El resto de los procesos permanecen sin modificación ya que solo la Abuela administra todo.